package com.canmeizhexue.javademo.designpattern.factorymethod;
/**
 * 定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类。
 * @author canmeizhexue
 *
 */
public class Client {
	public static void main(String[]args){
		/**
		 * 优点：
		 * 1.可以有效的封装变化，通过工厂模式，将产品的实例化进行封装起来，
		 * 使得调用者无需关心产品的实例化过程，只需依赖工厂就可以得到自己想要的产品。
		 * 2.对调用者屏蔽了具体的产品类。调用者只需关心产品的接口就可以了。对调用者来说，产品所依赖的类都是透明的。
		 * 
		 * 要素：
		 * 1.工厂接口。与调用者直接交互用来提供产品。
		 * 2.工厂实现。工厂实现决定如何实例化产品。有多少种产品就会有多少个具体的工厂实现。
		 * 3.产品接口。定义产品的规范。产品接口是调用者最为关心的。
		 * 4.产品实现。实现产品接口的具体类，决定了产品在客户端中的具体行为。
		 * 
		 * 适用场景：
		 * 1.作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。
		 * 2.假如调用者自己组装产品需要增加依赖关系时，可以考虑使用工厂模式。将会大大降低对象之间的耦合度。
		 * 
		 * 与简单工厂模式(静态工厂模式)比较：
		 * 简单工厂模式一般没有工厂接口，得到产品的方法一般都是静态的。在工厂实现的扩展性方面稍弱。
		 */
		IFactory factory = new ConcreteFactory();
		IProduct product = factory.createProduct();
		product.productMethod();
	}
}
